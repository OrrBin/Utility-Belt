package algorithms;

import static org.junit.Assert.assertArrayEquals;

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

public class InsertionSortTest {


	class Number {
		private int i;
		
		public Number(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}
	}

	class ComparableNumber implements Comparable<ComparableNumber> {

		private int i;
		public ComparableNumber(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}

		@Override
		public int compareTo(ComparableNumber o) {
			if(i < o.i) {
				return -1;
			}
			if(i > o.i) {
				return 1;
			}
			return 0;
		}

		@Override
		public String toString() {
			return "" + 1;
		}
	}
	
	private int[] intArr;
	private float[] floatArr;
	private double[] doubleArr;
	private short[] shortArr;
	private long[] longArr;
	private ComparableNumber[] comparArr;
	private Number[] numberArr;
	
	private int[] intArrSorted;
	private float[] floatArrSorted;
	private double[] doubleArrSorted;
	private short[] shortArrSorted;
	private long[] longArrSorted;
	private ComparableNumber[] comparArrSorted;
	private Number[] numberArrSorted;


	@Before
	public void setUp() throws Exception {
		//Size of arrays
		int k = 1000;

		intArr = new int[k];
		floatArr = new float[k];
		doubleArr = new double[k];
		shortArr = new short[k];
		longArr = new long[k];
		comparArr = new ComparableNumber[k];
		numberArr = new Number[k];

		intArrSorted = new int[k];
		floatArrSorted = new float[k];
		doubleArrSorted = new double[k];
		shortArrSorted = new short[k];
		longArrSorted = new long[k];
		comparArrSorted = new ComparableNumber[k];
		numberArrSorted = new Number[k];
		
		List<Integer> perm = new LinkedList<>();
		for(int idx = 0; idx < k; idx++) {
			perm.add(idx);
		}
		
		Collections.shuffle(perm);
		
		for(int idx = 0; idx < k; idx++) {
			intArr[perm.get(idx)] = idx;
			floatArr[perm.get(idx)] = idx;
			doubleArr[perm.get(idx)] = idx;
			shortArr[perm.get(idx)] = (short)idx;
			longArr[perm.get(idx)] = idx;
			comparArr[perm.get(idx)] = new ComparableNumber(idx);
			numberArr[perm.get(idx)] = new Number(idx);
			
			intArrSorted[idx] = idx;
			floatArrSorted[idx] = idx;
			doubleArrSorted[idx] = idx;
			shortArrSorted[idx] = (short)idx;
			longArrSorted[idx] = idx;
			comparArrSorted[idx] = new ComparableNumber(idx);
			numberArrSorted[idx] = new Number(idx);
			
		}
		
	}

	@Test
	public void test() {
		Sort.insertionSort(intArr);
		Sort.insertionSort(floatArr);
		Sort.insertionSort(doubleArr);
		Sort.insertionSort(shortArr);
		Sort.insertionSort(longArr);
		Sort.insertionSort(comparArr);
		Sort.insertionSort(numberArr, new Comparator<Number>() {

			@Override
			public int compare(Number o1, Number o2) {
				if(o1.getI() < o2.getI())
					return -1;
				if(o1.getI() > o2.getI())
					return 1;
				return 0;
				
			}
			
		});
		
		assertArrayEquals(intArr, intArrSorted);
		assertArrayEquals(floatArr, floatArrSorted, 0.0001f);
		assertArrayEquals(doubleArr, doubleArrSorted, 0.0001);
		assertArrayEquals(shortArr, shortArrSorted);
		assertArrayEquals(longArr, longArrSorted);
		assertArrayEquals(comparArr, comparArrSorted);
		assertArrayEquals(numberArr, numberArrSorted);
		
	}

}
