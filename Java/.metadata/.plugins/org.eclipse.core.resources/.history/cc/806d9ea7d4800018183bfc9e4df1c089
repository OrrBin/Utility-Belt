package algorithms;

import java.util.Comparator;

public class Sort {

	//*******************************************************
	//	Merge-Sort
	//*******************************************************
	
	public static int[]  mergeSort(int[] array) {
		return array;
	}
	
	public static float[]  mergeSort(float[] array) {
		return array;
	}
	
	public static double[]  mergeSort(double[] array) {
		return array;
	}
	
	public static short[]  mergeSort(short[] array) {
		return array;
	}
	
	public static long[]  mergeSort(long[] array) {
		return array;
	}
	
	public static <T extends Comparable<?>> T[]  mergeSort(T[] array) {
		return array;
	}
	
	public static <T> T[]  mergeSort(T[] array, Comparator<T> comperator) {
		return array;
	}
	
	//*******************************************************
	//	Quick-Sort
	//*******************************************************
	
	public static int[]  quickSort(int[] array) {
		return array;
	}
	
	public static float[]  quickSort(float[] array) {
		return array;
	}
	
	public static double[]  quickSort(double[] array) {
		return array;
	}
	
	public static short[]  quickSort(short[] array) {
		return array;
	}
	
	public static long[]  quickSort(long[] array) {
		return array;
	}
	
	public static <T extends Comparable<?>> T[]  quickSort(T[] array) {
		return array;
	}
	
	public static <T> T[]  quickSort(T[] array, Comparator<T> comperator) {
		return array;
	}
	
	//*******************************************************
	//	Insertion-Sort
	//*******************************************************
	
	public static insertionSort(int[] array) {
		if(array.length <= 1)
			return;
		int size = array.length;
		int key;
		for(int i = 1; i < size; i++) {
			key = array[i]
		}
	}
	
	public static float[]  insertionSort(float[] array) {
		return array;
	}
	
	public static double[]  insertionSort(double[] array) {
		return array;
	}
	
	public static short[]  insertionSort(short[] array) {
		return array;
	}
	
	public static long[]  insertionSort(long[] array) {
		return array;
	}
	
	public static <T extends Comparable<?>> T[]  insertionSort(T[] array) {
		return array;
	}
	
	public static <T> T[]  insertionSort(T[] array, Comparator<T> comperator) {
		return array;
	}
}
