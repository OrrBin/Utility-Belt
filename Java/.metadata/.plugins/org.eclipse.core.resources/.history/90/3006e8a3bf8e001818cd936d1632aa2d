package algorithms;

public class TesterHelpers {
	class Number {
		private int i;
		
		public Number(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}
		
		@Override
		public String toString() {
			return "" + i;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + i;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Number other = (Number) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (i != other.i)
				return false;
			return true;
		}
	}

	class ComparableNumber implements Comparable<ComparableNumber> {

		private int i;
		public ComparableNumber(int i) {
			this.i = i;
		}
		
		public int getI() {
			return i;
		}

		@Override
		public int compareTo(ComparableNumber o) {
			if(i < o.i) {
				return -1;
			}
			if(i > o.i) {
				return 1;
			}
			return 0;
		}

		@Override
		public String toString() {
			return "" + i;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + i;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ComparableNumber other = (ComparableNumber) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (i != other.i)
				return false;
			return true;
		}
		
	}
}
