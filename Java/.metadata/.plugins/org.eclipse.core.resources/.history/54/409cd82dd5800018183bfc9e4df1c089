package algorithms;

import java.util.Comparator;

public class Sort {

	//*******************************************************
	//	Merge-Sort
	//*******************************************************
	
	public static void mergeSort(int[] array) {
		
	}
	
	public static void mergeSort(float[] array) {
		
	}
	
	public static void mergeSort(double[] array) {
		
	}
	
	public static void mergeSort(short[] array) {
		
	}
	
	public static void mergeSort(long[] array) {
		
	}
	
	public static <T extends Comparable<?>> void mergeSort(T[] array) {
		
	}
	
	public static <T> void mergeSort(T[] array, Comparator<T> comperator) {
		
	}
	
	//*******************************************************
	//	Quick-Sort
	//*******************************************************
	
	public static void quickSort(int[] array) {
		
	}
	
	public static void quickSort(float[] array) {
		
	}
	
	public static void quickSort(double[] array) {
		
	}
	
	public static void quickSort(short[] array) {
		
	}
	
	public static void quickSort(long[] array) {
		
	}
	
	public static <T extends Comparable<?>> void quickSort(T[] array) {
		
	}
	
	public static <T> void quickSort(T[] array, Comparator<T> comperator) {
		
	}
	
	//*******************************************************
	//	Insertion-Sort
	//*******************************************************
	
	public static void insertionSort(int[] array) {
		if(array.length <= 1)
			return;
		int size = array.length;
		int key;
		for(int i = 1; i < size; i++) {
			key = array[i];
		}
	}
	
	public static void insertionSort(float[] array) {
		
	}
	
	public static void insertionSort(double[] array) {
		
	}
	
	public static void insertionSort(short[] array) {
		
	}
	
	public static void insertionSort(long[] array) {
		
	}
	
	public static <T extends Comparable<?>> void insertionSort(T[] array) {
		
	}
	
	public static <T> void insertionSort(T[] array, Comparator<T> comperator) {
		
	}
}
